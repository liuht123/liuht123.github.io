<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Liuht的博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-01-04T02:04:39.873Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>liuht</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux导入导出mongo脚本</title>
    <link href="http://yoursite.com/2017/01/04/page_7/"/>
    <id>http://yoursite.com/2017/01/04/page_7/</id>
    <published>2017-01-04T01:56:18.189Z</published>
    <updated>2017-01-04T02:04:39.873Z</updated>
    
    <content type="html"><![CDATA[<h2 id="linux下导出mongo数据库脚本（-json）"><a href="#linux下导出mongo数据库脚本（-json）" class="headerlink" title="linux下导出mongo数据库脚本（.json）"></a>linux下导出mongo数据库脚本（.json）</h2><p>1.进入mongo的bin目录下。</p>
<p>2.执行./mongoexport –host ip –port 端口号 –db 数据库名 –collection 集合名 -o 导出的文件名（.json文件）</p>
<p>3.导出完成。</p>
<h2 id="linux下导入数据库脚本（-json）"><a href="#linux下导入数据库脚本（-json）" class="headerlink" title="linux下导入数据库脚本（.json）"></a>linux下导入数据库脚本（.json）</h2><p>1.将mongo脚本.json文件上传至服务器mongodb目录下。</p>
<p>2.进入mongo的bin目录下。</p>
<p>3.执行./mongoimport –host ip –port 端口号 –db 数据库名 –collection 集合名 –file 脚本地址（.json） –upsert</p>
<p>4.导入完成</p>
<a id="more"></a>
<p>–host：ip地址<br>–port：端口号<br>–db：数据库名<br>–collection：集合名<br>–file：指定从哪一个文件中导入数据<br>–upsert：以新增或更新的方式导入数据<br>–o：指定导出数据到哪一个文件中</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;linux下导出mongo数据库脚本（-json）&quot;&gt;&lt;a href=&quot;#linux下导出mongo数据库脚本（-json）&quot; class=&quot;headerlink&quot; title=&quot;linux下导出mongo数据库脚本（.json）&quot;&gt;&lt;/a&gt;linux下导出mongo数据库脚本（.json）&lt;/h2&gt;&lt;p&gt;1.进入mongo的bin目录下。&lt;/p&gt;
&lt;p&gt;2.执行./mongoexport –host ip –port 端口号 –db 数据库名 –collection 集合名 -o 导出的文件名（.json文件）&lt;/p&gt;
&lt;p&gt;3.导出完成。&lt;/p&gt;
&lt;h2 id=&quot;linux下导入数据库脚本（-json）&quot;&gt;&lt;a href=&quot;#linux下导入数据库脚本（-json）&quot; class=&quot;headerlink&quot; title=&quot;linux下导入数据库脚本（.json）&quot;&gt;&lt;/a&gt;linux下导入数据库脚本（.json）&lt;/h2&gt;&lt;p&gt;1.将mongo脚本.json文件上传至服务器mongodb目录下。&lt;/p&gt;
&lt;p&gt;2.进入mongo的bin目录下。&lt;/p&gt;
&lt;p&gt;3.执行./mongoimport –host ip –port 端口号 –db 数据库名 –collection 集合名 –file 脚本地址（.json） –upsert&lt;/p&gt;
&lt;p&gt;4.导入完成&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
      <category term="mongo" scheme="http://yoursite.com/categories/Linux/mongo/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="mongo" scheme="http://yoursite.com/tags/mongo/"/>
    
  </entry>
  
  <entry>
    <title>用axis开发服务端和客户端</title>
    <link href="http://yoursite.com/2016/12/21/page_6/"/>
    <id>http://yoursite.com/2016/12/21/page_6/</id>
    <published>2016-12-21T14:32:05.636Z</published>
    <updated>2016-12-21T16:01:08.080Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h2><h3 id="1-导入axis-jar包"><a href="#1-导入axis-jar包" class="headerlink" title="1.导入axis jar包"></a>1.导入axis jar包</h3><h3 id="2-右键项目，Run-As-Run-Configurations-new一个Java-Application-点击search-选择wsdl2java-勾选第一个复选框。"><a href="#2-右键项目，Run-As-Run-Configurations-new一个Java-Application-点击search-选择wsdl2java-勾选第一个复选框。" class="headerlink" title="2.右键项目，Run As , Run Configurations , new一个Java Application , 点击search , 选择wsdl2java , 勾选第一个复选框。"></a>2.右键项目，Run As , Run Configurations , new一个Java Application , 点击search , 选择wsdl2java , 勾选第一个复选框。</h3><h3 id="3-点击Argumnets-在Program-arguments内输入以下内容（服务端：-t-s-wsdl文件路径-o-输出目录，客户端：-t-wsdl文件路径-o-输出目录）"><a href="#3-点击Argumnets-在Program-arguments内输入以下内容（服务端：-t-s-wsdl文件路径-o-输出目录，客户端：-t-wsdl文件路径-o-输出目录）" class="headerlink" title="3.点击Argumnets , 在Program arguments内输入以下内容（服务端：-t -s wsdl文件路径 -o 输出目录，客户端：-t wsdl文件路径 -o 输出目录）"></a>3.点击Argumnets , 在Program arguments内输入以下内容（服务端：-t -s wsdl文件路径 -o 输出目录，客户端：-t wsdl文件路径 -o 输出目录）</h3><p>-t：生成junit测试用例<br>-s：生成服务端代码<br>-o：代码输出目录</p>
<h3 id="4-点击Apply-点击run-刷新项目，即在此项目下根据wsdl文件生成了服务端或客户端代码。"><a href="#4-点击Apply-点击run-刷新项目，即在此项目下根据wsdl文件生成了服务端或客户端代码。" class="headerlink" title="4.点击Apply, 点击run, 刷新项目，即在此项目下根据wsdl文件生成了服务端或客户端代码。"></a>4.点击Apply, 点击run, 刷新项目，即在此项目下根据wsdl文件生成了服务端或客户端代码。</h3><a id="more"></a>
<h3 id="5-根据wsdl文件生成服务端或客户端后："><a href="#5-根据wsdl文件生成服务端或客户端后：" class="headerlink" title="5.根据wsdl文件生成服务端或客户端后："></a>5.根据wsdl文件生成服务端或客户端后：</h3><p>（1）客户端测试类：</p>
<pre><code>public static void main(String[] args) throws ServiceException {
     xxxxx_ServiceLocator serviceLocator = new xxxxx_ServiceLocator();

     xxxxx_PortType service = serviceLocator.getxxxxx();
     service.xxxxxx();
}
</code></pre><p>或者在junit的TestCase中测试。</p>
<p>（2）服务端具体实现类写在###########SoapBindingImpl类中</p>
<h2 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h2><p>写一个.bat文件<br>服务端：</p>
<pre><code>set Axis_Lib=D:\Axis\axis-bin-1_4\axis-1_4\lib
set Java_Cmd=java -Djava.ext.dirs=%Axis_Lib% 
set Output_Path=C:\Users\xxxx\Desktop\axis-client
%Java_Cmd% org.apache.axis.wsdl.WSDL2Java -o%Output_Path% C:\Users\xxxx\Desktop\wsdl\xxxxx.wsdl -s -t
</code></pre><p>客户端：</p>
<pre><code>set Axis_Lib=D:\Axis\axis-bin-1_4\axis-1_4\lib
set Java_Cmd=java -Djava.ext.dirs=%Axis_Lib% 
set Output_Path=C:\Users\xxxx\Desktop\axis-client
%Java_Cmd% org.apache.axis.wsdl.WSDL2Java -o%Output_Path% C:\Users\xxxx\Desktop\wsdl\xxxx.wsdl -t
</code></pre><p>Axis_Lib：axis jar包路径。<br>output_path：代码输出路径。</p>
<p><strong> 服务端生成后，新建server-config.xml，复制deploy.xml内容至其中。</strong></p>
<h3 id="xsd文件生成java类："><a href="#xsd文件生成java类：" class="headerlink" title="xsd文件生成java类："></a>xsd文件生成java类：</h3><p>1.把xsd文件复制到项目下。<br>2.右击xsd文件，选择Generate，JAXB Classes<br>3.选择Source folder，Package<br>4.next到finish。</p>
<h3 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h3><p>服务端多值返回可以用StringHolder对象来处理，用StringHolder.value()获取值。<br>比如：服务端返回errorCode和errorMsg时，请求参数和返回参数写在一起，返回void。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;第一种方式&quot;&gt;&lt;a href=&quot;#第一种方式&quot; class=&quot;headerlink&quot; title=&quot;第一种方式&quot;&gt;&lt;/a&gt;第一种方式&lt;/h2&gt;&lt;h3 id=&quot;1-导入axis-jar包&quot;&gt;&lt;a href=&quot;#1-导入axis-jar包&quot; class=&quot;headerlink&quot; title=&quot;1.导入axis jar包&quot;&gt;&lt;/a&gt;1.导入axis jar包&lt;/h3&gt;&lt;h3 id=&quot;2-右键项目，Run-As-Run-Configurations-new一个Java-Application-点击search-选择wsdl2java-勾选第一个复选框。&quot;&gt;&lt;a href=&quot;#2-右键项目，Run-As-Run-Configurations-new一个Java-Application-点击search-选择wsdl2java-勾选第一个复选框。&quot; class=&quot;headerlink&quot; title=&quot;2.右键项目，Run As , Run Configurations , new一个Java Application , 点击search , 选择wsdl2java , 勾选第一个复选框。&quot;&gt;&lt;/a&gt;2.右键项目，Run As , Run Configurations , new一个Java Application , 点击search , 选择wsdl2java , 勾选第一个复选框。&lt;/h3&gt;&lt;h3 id=&quot;3-点击Argumnets-在Program-arguments内输入以下内容（服务端：-t-s-wsdl文件路径-o-输出目录，客户端：-t-wsdl文件路径-o-输出目录）&quot;&gt;&lt;a href=&quot;#3-点击Argumnets-在Program-arguments内输入以下内容（服务端：-t-s-wsdl文件路径-o-输出目录，客户端：-t-wsdl文件路径-o-输出目录）&quot; class=&quot;headerlink&quot; title=&quot;3.点击Argumnets , 在Program arguments内输入以下内容（服务端：-t -s wsdl文件路径 -o 输出目录，客户端：-t wsdl文件路径 -o 输出目录）&quot;&gt;&lt;/a&gt;3.点击Argumnets , 在Program arguments内输入以下内容（服务端：-t -s wsdl文件路径 -o 输出目录，客户端：-t wsdl文件路径 -o 输出目录）&lt;/h3&gt;&lt;p&gt;-t：生成junit测试用例&lt;br&gt;-s：生成服务端代码&lt;br&gt;-o：代码输出目录&lt;/p&gt;
&lt;h3 id=&quot;4-点击Apply-点击run-刷新项目，即在此项目下根据wsdl文件生成了服务端或客户端代码。&quot;&gt;&lt;a href=&quot;#4-点击Apply-点击run-刷新项目，即在此项目下根据wsdl文件生成了服务端或客户端代码。&quot; class=&quot;headerlink&quot; title=&quot;4.点击Apply, 点击run, 刷新项目，即在此项目下根据wsdl文件生成了服务端或客户端代码。&quot;&gt;&lt;/a&gt;4.点击Apply, 点击run, 刷新项目，即在此项目下根据wsdl文件生成了服务端或客户端代码。&lt;/h3&gt;
    
    </summary>
    
      <category term="webservice" scheme="http://yoursite.com/categories/webservice/"/>
    
      <category term="axis" scheme="http://yoursite.com/categories/webservice/axis/"/>
    
    
      <category term="webservice" scheme="http://yoursite.com/tags/webservice/"/>
    
      <category term="axis" scheme="http://yoursite.com/tags/axis/"/>
    
  </entry>
  
  <entry>
    <title>用cxf开发服务端和客户端</title>
    <link href="http://yoursite.com/2016/12/21/page_5/"/>
    <id>http://yoursite.com/2016/12/21/page_5/</id>
    <published>2016-12-21T14:03:54.778Z</published>
    <updated>2016-12-21T16:00:54.473Z</updated>
    
    <content type="html"><![CDATA[<h2 id="服务端开发的实现"><a href="#服务端开发的实现" class="headerlink" title="服务端开发的实现"></a>服务端开发的实现</h2><h3 id="1-打开命令行操作界面，进入到cxf-bin目录下，输入wsdl2java-–server-–impl-wsdl的完整文件名，点击回车键，即生成了webservice服务端程序。"><a href="#1-打开命令行操作界面，进入到cxf-bin目录下，输入wsdl2java-–server-–impl-wsdl的完整文件名，点击回车键，即生成了webservice服务端程序。" class="headerlink" title="1.打开命令行操作界面，进入到cxf\bin目录下，输入wsdl2java  –server  –impl  wsdl的完整文件名，点击回车键，即生成了webservice服务端程序。"></a>1.打开命令行操作界面，进入到cxf\bin目录下，输入wsdl2java  –server  –impl  wsdl的完整文件名，点击回车键，即生成了webservice服务端程序。</h3><pre><code>D:\apache-cxf-2.2.4\bin&gt;wsdl2java -server -impl xxxxxx.wsdl
</code></pre><h3 id="2-导入cxf的jar包"><a href="#2-导入cxf的jar包" class="headerlink" title="2.导入cxf的jar包"></a>2.导入cxf的jar包</h3><h3 id="3-在src目录下建立一个ApplicationContext-xml文件，输入以下内容："><a href="#3-在src目录下建立一个ApplicationContext-xml文件，输入以下内容：" class="headerlink" title="3.在src目录下建立一个ApplicationContext.xml文件，输入以下内容："></a>3.在src目录下建立一个ApplicationContext.xml文件，输入以下内容：</h3><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;
xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
xmlns:cxf=&quot;http://cxf.apache.org/core&quot;
xmlns:soap=&quot;http://cxf.apache.org/bindings/soap&quot;
xmlns:jaxws=&quot;http://cxf.apache.org/jaxws&quot;
xsi:schemaLocation=&quot;http://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsd
http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd
http://cxf.apache.org/bindings/soap http://cxf.apache.org/schema/bindings/soap.xsd
http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd&quot;&gt;

&lt;import resource=&quot;classpath:META-INF/cxf/cxf.xml&quot; /&gt;
&lt;import resource=&quot;classpath:META-INF/cxf/cxf-extension-soap.xml&quot; /&gt;
&lt;import resource=&quot;classpath:META-INF/cxf/cxf-extension-local.xml&quot; /&gt;
&lt;import resource=&quot;classpath:META-INF/cxf/cxf-extension-http.xml&quot; /&gt;
&lt;import resource=&quot;classpath:META-INF/cxf/cxf-servlet.xml&quot; /&gt;
&lt;!--  CIMCardAgreementService HTTP --&gt; 
&lt;jaxws:endpoint id=&quot;CIMCardAgreementService&quot; implementor=&quot;com.bankcomm.pccc.service.cim.abstraction.atomic.pccc_cim_cimcardagreement.v1.CIMCardAgreementImpl&quot;
address=&quot;/CIMCardAgreementService&quot;&gt;
&lt;/jaxws:endpoint&gt;          
&lt;/beans&gt;
</code></pre><a id="more"></a>
<p>其中id属性值依据具体的服务来决定，implementor属性值应填入：服务实现类的完整的包名加上类名，address属性值填入服务发布的相对地址，依据具体服务来决定</p>
<h3 id="4-找到实现类的注释部分，将wsdlLocation-“”一段注释删除"><a href="#4-找到实现类的注释部分，将wsdlLocation-“”一段注释删除" class="headerlink" title="4.找到实现类的注释部分，将wsdlLocation = “”一段注释删除"></a>4.找到实现类的注释部分，将wsdlLocation = “”一段注释删除</h3><h3 id="5-找到工程的web-xml，输入以下内容"><a href="#5-找到工程的web-xml，输入以下内容" class="headerlink" title="5.找到工程的web.xml，输入以下内容"></a>5.找到工程的web.xml，输入以下内容</h3><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;web-app id=&quot;WebApp_ID&quot; version=&quot;2.4&quot; 
xmlns=&quot;http://java.sun.com/xml/ns/j2ee&quot; 
xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; 
xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd&quot;&gt;
&lt;display-name&gt;loanAcctMaintainServiceServer&lt;/display-name&gt;

&lt;context-param&gt;
&lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
&lt;param-value&gt;classpath:ApplicationContext.xml&lt;/param-value&gt;
&lt;/context-param&gt;

&lt;listener&gt;
&lt;listener-class&gt;
org.springframework.web.context.ContextLoaderListener
&lt;/listener-class&gt;
&lt;/listener&gt;

&lt;servlet&gt;
&lt;servlet-name&gt;CXFServlet&lt;/servlet-name&gt;
&lt;servlet-class&gt;org.apache.cxf.transport.servlet.CXFServlet&lt;/servlet-class&gt;
&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
&lt;/servlet&gt;
&lt;servlet-mapping&gt;
&lt;servlet-name&gt;CXFServlet&lt;/servlet-name&gt;
&lt;url-pattern&gt;/WS/*&lt;/url-pattern&gt;
&lt;/servlet-mapping&gt;

&lt;welcome-file-list&gt;
&lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;
&lt;/welcome-file-list&gt;
&lt;/web-app&gt;
</code></pre><h3 id="6-将服务部署到服务器上运行"><a href="#6-将服务部署到服务器上运行" class="headerlink" title="6.将服务部署到服务器上运行"></a>6.将服务部署到服务器上运行</h3><p>在浏览器的地址栏中输入<a href="http://服务器的IP：服务器上端口号/工程名/WS/，点击回车，查看。" target="_blank" rel="external">http://服务器的IP：服务器上端口号/工程名/WS/，点击回车，查看。</a></p>
<h2 id="客户端开发实现"><a href="#客户端开发实现" class="headerlink" title="客户端开发实现"></a>客户端开发实现</h2><h3 id="1-打开命令行操作界面，进入到cxf-bin目录下，输入wsdl2java-–client-wsdl的完整文件名，点击回车键，即生成了webservice客户端程序。"><a href="#1-打开命令行操作界面，进入到cxf-bin目录下，输入wsdl2java-–client-wsdl的完整文件名，点击回车键，即生成了webservice客户端程序。" class="headerlink" title="1.打开命令行操作界面，进入到cxf\bin目录下，输入wsdl2java  –client wsdl的完整文件名，点击回车键，即生成了webservice客户端程序。"></a>1.打开命令行操作界面，进入到cxf\bin目录下，输入wsdl2java  –client wsdl的完整文件名，点击回车键，即生成了webservice客户端程序。</h3><pre><code>D:\apache-cxf-2.2.4\bin&gt;wsdl2java -client xxxxxx.wsdl
</code></pre><h3 id="2-导入cxf的jar包-1"><a href="#2-导入cxf的jar包-1" class="headerlink" title="2.导入cxf的jar包"></a>2.导入cxf的jar包</h3><h3 id="3-编写客户端调用类"><a href="#3-编写客户端调用类" class="headerlink" title="3.编写客户端调用类"></a>3.编写客户端调用类</h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;服务端开发的实现&quot;&gt;&lt;a href=&quot;#服务端开发的实现&quot; class=&quot;headerlink&quot; title=&quot;服务端开发的实现&quot;&gt;&lt;/a&gt;服务端开发的实现&lt;/h2&gt;&lt;h3 id=&quot;1-打开命令行操作界面，进入到cxf-bin目录下，输入wsdl2java-–server-–impl-wsdl的完整文件名，点击回车键，即生成了webservice服务端程序。&quot;&gt;&lt;a href=&quot;#1-打开命令行操作界面，进入到cxf-bin目录下，输入wsdl2java-–server-–impl-wsdl的完整文件名，点击回车键，即生成了webservice服务端程序。&quot; class=&quot;headerlink&quot; title=&quot;1.打开命令行操作界面，进入到cxf\bin目录下，输入wsdl2java  –server  –impl  wsdl的完整文件名，点击回车键，即生成了webservice服务端程序。&quot;&gt;&lt;/a&gt;1.打开命令行操作界面，进入到cxf\bin目录下，输入wsdl2java  –server  –impl  wsdl的完整文件名，点击回车键，即生成了webservice服务端程序。&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;D:\apache-cxf-2.2.4\bin&amp;gt;wsdl2java -server -impl xxxxxx.wsdl
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;2-导入cxf的jar包&quot;&gt;&lt;a href=&quot;#2-导入cxf的jar包&quot; class=&quot;headerlink&quot; title=&quot;2.导入cxf的jar包&quot;&gt;&lt;/a&gt;2.导入cxf的jar包&lt;/h3&gt;&lt;h3 id=&quot;3-在src目录下建立一个ApplicationContext-xml文件，输入以下内容：&quot;&gt;&lt;a href=&quot;#3-在src目录下建立一个ApplicationContext-xml文件，输入以下内容：&quot; class=&quot;headerlink&quot; title=&quot;3.在src目录下建立一个ApplicationContext.xml文件，输入以下内容：&quot;&gt;&lt;/a&gt;3.在src目录下建立一个ApplicationContext.xml文件，输入以下内容：&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;beans xmlns=&amp;quot;http://www.springframework.org/schema/beans&amp;quot;
xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot;
xmlns:cxf=&amp;quot;http://cxf.apache.org/core&amp;quot;
xmlns:soap=&amp;quot;http://cxf.apache.org/bindings/soap&amp;quot;
xmlns:jaxws=&amp;quot;http://cxf.apache.org/jaxws&amp;quot;
xsi:schemaLocation=&amp;quot;http://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsd
http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd
http://cxf.apache.org/bindings/soap http://cxf.apache.org/schema/bindings/soap.xsd
http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd&amp;quot;&amp;gt;

&amp;lt;import resource=&amp;quot;classpath:META-INF/cxf/cxf.xml&amp;quot; /&amp;gt;
&amp;lt;import resource=&amp;quot;classpath:META-INF/cxf/cxf-extension-soap.xml&amp;quot; /&amp;gt;
&amp;lt;import resource=&amp;quot;classpath:META-INF/cxf/cxf-extension-local.xml&amp;quot; /&amp;gt;
&amp;lt;import resource=&amp;quot;classpath:META-INF/cxf/cxf-extension-http.xml&amp;quot; /&amp;gt;
&amp;lt;import resource=&amp;quot;classpath:META-INF/cxf/cxf-servlet.xml&amp;quot; /&amp;gt;
&amp;lt;!--  CIMCardAgreementService HTTP --&amp;gt; 
&amp;lt;jaxws:endpoint id=&amp;quot;CIMCardAgreementService&amp;quot; implementor=&amp;quot;com.bankcomm.pccc.service.cim.abstraction.atomic.pccc_cim_cimcardagreement.v1.CIMCardAgreementImpl&amp;quot;
address=&amp;quot;/CIMCardAgreementService&amp;quot;&amp;gt;
&amp;lt;/jaxws:endpoint&amp;gt;          
&amp;lt;/beans&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="webservice" scheme="http://yoursite.com/categories/webservice/"/>
    
      <category term="cxf" scheme="http://yoursite.com/categories/webservice/cxf/"/>
    
    
      <category term="webservice" scheme="http://yoursite.com/tags/webservice/"/>
    
      <category term="cxf" scheme="http://yoursite.com/tags/cxf/"/>
    
  </entry>
  
  <entry>
    <title>git和svn的区别</title>
    <link href="http://yoursite.com/2016/12/20/page_4/"/>
    <id>http://yoursite.com/2016/12/20/page_4/</id>
    <published>2016-12-20T15:09:55.295Z</published>
    <updated>2016-12-21T16:01:51.987Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1）Git是分布式的，SVN不是："><a href="#1）Git是分布式的，SVN不是：" class="headerlink" title="1）Git是分布式的，SVN不是："></a>1）Git是分布式的，SVN不是：</h2><p>这是git和其它非分布式的版本控制系统，例如SVN，CVS等，最核心的区别。好处是跟其他同事不会有太多的冲突，自己写的代码放在自己电脑上，一段时间后再提交、合并，也可以不用联网在本地提交。<br>git跟SVN一样有自己的集中式版本库或服务器。但git更倾向于被使用于分布式模式，也就是每个开发人员从中心版本库/服务器上chect out代码后会在自己的机器上克隆一个自己的版本库。可以这样说，如果你被困在一个不能连接网络的地方时，你仍然能够提交文件，查看历史版本记录，创建项目分支等。</p>
<h2 id="2）git把内容按元数据方式存储，而SVN是按文件："><a href="#2）git把内容按元数据方式存储，而SVN是按文件：" class="headerlink" title="2）git把内容按元数据方式存储，而SVN是按文件："></a>2）git把内容按元数据方式存储，而SVN是按文件：</h2><p>所有的资源控制系统都是把文件的元信息隐藏在一个类似.svn,.cvs等的文件夹里。如果你把.git目录的体积大小跟.svn比较，你会发现它们差距很大。因为.git目录是处于你的机器上的一个克隆版的版本库，它拥有中心版本库上所有的东西，例如标签，分支，版本记录等。</p>
<a id="more"></a>
<h2 id="3）git没有一个全局的版本号，而SVN有"><a href="#3）git没有一个全局的版本号，而SVN有" class="headerlink" title="3）git没有一个全局的版本号，而SVN有"></a>3）git没有一个全局的版本号，而SVN有</h2><h2 id="4）git分支和SVN的分支不同："><a href="#4）git分支和SVN的分支不同：" class="headerlink" title="4）git分支和SVN的分支不同："></a>4）git分支和SVN的分支不同：</h2><p>分支在SVN中一点不特别，就是版本库中的另外的一个目录。如果你想知道是否合并了一个分支，你需要手工运行像这样的命令svn propget svn:mergeinfo，来确认代码是否被合并。然而，处理git的分支却是相当的简单和有趣。</p>
<h2 id="5）git的内容完整性要优于SVN："><a href="#5）git的内容完整性要优于SVN：" class="headerlink" title="5）git的内容完整性要优于SVN："></a>5）git的内容完整性要优于SVN：</h2><p>git的内容存储使用的是SHA-1哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。</p>
<h2 id="6）git下载下来后，在本地不必联网就可以看到所有的log，很方便学习，SVN却需要联网；"><a href="#6）git下载下来后，在本地不必联网就可以看到所有的log，很方便学习，SVN却需要联网；" class="headerlink" title="6）git下载下来后，在本地不必联网就可以看到所有的log，很方便学习，SVN却需要联网；"></a>6）git下载下来后，在本地不必联网就可以看到所有的log，很方便学习，SVN却需要联网；</h2><h2 id="7）SVN在Commit前，我们都建议是先Update一下，跟本地的代码编译没问题，并确保开发的功能正常后再提交，git可能这种情况会少些。"><a href="#7）SVN在Commit前，我们都建议是先Update一下，跟本地的代码编译没问题，并确保开发的功能正常后再提交，git可能这种情况会少些。" class="headerlink" title="7）SVN在Commit前，我们都建议是先Update一下，跟本地的代码编译没问题，并确保开发的功能正常后再提交，git可能这种情况会少些。"></a>7）SVN在Commit前，我们都建议是先Update一下，跟本地的代码编译没问题，并确保开发的功能正常后再提交，git可能这种情况会少些。</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1）Git是分布式的，SVN不是：&quot;&gt;&lt;a href=&quot;#1）Git是分布式的，SVN不是：&quot; class=&quot;headerlink&quot; title=&quot;1）Git是分布式的，SVN不是：&quot;&gt;&lt;/a&gt;1）Git是分布式的，SVN不是：&lt;/h2&gt;&lt;p&gt;这是git和其它非分布式的版本控制系统，例如SVN，CVS等，最核心的区别。好处是跟其他同事不会有太多的冲突，自己写的代码放在自己电脑上，一段时间后再提交、合并，也可以不用联网在本地提交。&lt;br&gt;git跟SVN一样有自己的集中式版本库或服务器。但git更倾向于被使用于分布式模式，也就是每个开发人员从中心版本库/服务器上chect out代码后会在自己的机器上克隆一个自己的版本库。可以这样说，如果你被困在一个不能连接网络的地方时，你仍然能够提交文件，查看历史版本记录，创建项目分支等。&lt;/p&gt;
&lt;h2 id=&quot;2）git把内容按元数据方式存储，而SVN是按文件：&quot;&gt;&lt;a href=&quot;#2）git把内容按元数据方式存储，而SVN是按文件：&quot; class=&quot;headerlink&quot; title=&quot;2）git把内容按元数据方式存储，而SVN是按文件：&quot;&gt;&lt;/a&gt;2）git把内容按元数据方式存储，而SVN是按文件：&lt;/h2&gt;&lt;p&gt;所有的资源控制系统都是把文件的元信息隐藏在一个类似.svn,.cvs等的文件夹里。如果你把.git目录的体积大小跟.svn比较，你会发现它们差距很大。因为.git目录是处于你的机器上的一个克隆版的版本库，它拥有中心版本库上所有的东西，例如标签，分支，版本记录等。&lt;/p&gt;
    
    </summary>
    
      <category term="git" scheme="http://yoursite.com/categories/git/"/>
    
      <category term="svn" scheme="http://yoursite.com/categories/git/svn/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="svn" scheme="http://yoursite.com/tags/svn/"/>
    
  </entry>
  
  <entry>
    <title>如何美化Github Pages搭建的独立博客</title>
    <link href="http://yoursite.com/2016/12/20/page_3/"/>
    <id>http://yoursite.com/2016/12/20/page_3/</id>
    <published>2016-12-20T14:31:18.846Z</published>
    <updated>2016-12-21T16:00:01.137Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、进入Hexo的官网主题专栏"><a href="#一、进入Hexo的官网主题专栏" class="headerlink" title="一、进入Hexo的官网主题专栏"></a>一、进入Hexo的官网主题专栏</h2><h2 id="二、挑选我们喜欢的主题"><a href="#二、挑选我们喜欢的主题" class="headerlink" title="二、挑选我们喜欢的主题"></a>二、挑选我们喜欢的主题</h2><p>可以看到有很多主题给我们选，我们只要选择喜欢的主题点击进去，然后进入到它的github地址，我们只要把这个地址复制下来(例如我是选择：hexo-theme-next这个主题)</p>
<h2 id="三、克隆主题"><a href="#三、克隆主题" class="headerlink" title="三、克隆主题"></a>三、克隆主题</h2><p>再打开Hexo文件夹下的themes目录，右键Git Bash，在命令行输入:</p>
<pre><code>git clone https://github.com/iissnan/hexo-theme-next(此处地址替换成你需要使用的主题的地址)
</code></pre><p>之后主题下载中，等待下载完成。</p>
<a id="more"></a>
<h2 id="四、修改Hexo配置文件"><a href="#四、修改Hexo配置文件" class="headerlink" title="四、修改Hexo配置文件"></a>四、修改Hexo配置文件</h2><p>下载完成后，打开Hexo文件夹下的配置文件_config.yml</p>
<p>修改参数为：<code>theme: hexo-theme-next</code></p>
<h2 id="五、部署主题，本地查看效果"><a href="#五、部署主题，本地查看效果" class="headerlink" title="五、部署主题，本地查看效果"></a>五、部署主题，本地查看效果</h2><p>返回Hexo目录，右键Git Bash，输入</p>
<pre><code>hexo g
hexo s
</code></pre><p>打开浏览器，输入 <a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a> 即可看见我们的主题已经更换了。</p>
<h2 id="六、如果效果满意，将它部署到Github上"><a href="#六、如果效果满意，将它部署到Github上" class="headerlink" title="六、如果效果满意，将它部署到Github上"></a>六、如果效果满意，将它部署到Github上</h2><p>打开Hexo文件夹，右键Git Bash，输入</p>
<pre><code>hexo clean   (必须要，不然有时因为缓存问题，服务器更新不了主题)
hexo g -d
</code></pre><h2 id="七、打开自己的主页，即可看到修改后的效果"><a href="#七、打开自己的主页，即可看到修改后的效果" class="headerlink" title="七、打开自己的主页，即可看到修改后的效果"></a>七、打开自己的主页，即可看到修改后的效果</h2><p>更多修改效果请查看对应主题的说明文档。</p>
<p>查看本主题（next）对应的说明文档，请点击<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">http://theme-next.iissnan.com/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、进入Hexo的官网主题专栏&quot;&gt;&lt;a href=&quot;#一、进入Hexo的官网主题专栏&quot; class=&quot;headerlink&quot; title=&quot;一、进入Hexo的官网主题专栏&quot;&gt;&lt;/a&gt;一、进入Hexo的官网主题专栏&lt;/h2&gt;&lt;h2 id=&quot;二、挑选我们喜欢的主题&quot;&gt;&lt;a href=&quot;#二、挑选我们喜欢的主题&quot; class=&quot;headerlink&quot; title=&quot;二、挑选我们喜欢的主题&quot;&gt;&lt;/a&gt;二、挑选我们喜欢的主题&lt;/h2&gt;&lt;p&gt;可以看到有很多主题给我们选，我们只要选择喜欢的主题点击进去，然后进入到它的github地址，我们只要把这个地址复制下来(例如我是选择：hexo-theme-next这个主题)&lt;/p&gt;
&lt;h2 id=&quot;三、克隆主题&quot;&gt;&lt;a href=&quot;#三、克隆主题&quot; class=&quot;headerlink&quot; title=&quot;三、克隆主题&quot;&gt;&lt;/a&gt;三、克隆主题&lt;/h2&gt;&lt;p&gt;再打开Hexo文件夹下的themes目录，右键Git Bash，在命令行输入:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/iissnan/hexo-theme-next(此处地址替换成你需要使用的主题的地址)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;之后主题下载中，等待下载完成。&lt;/p&gt;
    
    </summary>
    
      <category term="git" scheme="http://yoursite.com/categories/git/"/>
    
      <category term="hexo" scheme="http://yoursite.com/categories/git/hexo/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>利用Github Pages搭建独立博客简明教程</title>
    <link href="http://yoursite.com/2016/12/20/page_2/"/>
    <id>http://yoursite.com/2016/12/20/page_2/</id>
    <published>2016-12-20T12:15:30.864Z</published>
    <updated>2016-12-21T15:59:52.291Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、安装node-js"><a href="#一、安装node-js" class="headerlink" title="一、安装node.js"></a>一、安装node.js</h1><p>在 Windows 环境下安装 Node.js 非常简单，仅须到官网下载安装文件并执行即可完成安装,<br>不需要配置环境变量。</p>
<h1 id="二、安装Git"><a href="#二、安装Git" class="headerlink" title="二、安装Git"></a>二、安装Git</h1><p>安装完后，右键点击Git Bash Here即可打开Git Shell。</p>
<h2 id="Git基本操作"><a href="#Git基本操作" class="headerlink" title="Git基本操作"></a>Git基本操作</h2><p>git clone：将远程仓库复制到本地：git clone 项目地址<br>git init：新建一个仓库。<br>git pull：抓取远程仓库搜有分支更新合并到本地。<br>git add：跟踪新文件（把目标文件快件放入暂存区域）：git add 文件名/文件夹名，如果是跟踪全部修改过的文件：git add或者git add –all<br>git commit：提交你的修改：git commit -m “你的注释”<br>git push：推送你本地仓库的更新到远程仓库，语法为git push [远程名] [本地分支]：[远程分支]</p>
<a id="more"></a>
<h1 id="三、Hexo"><a href="#三、Hexo" class="headerlink" title="三、Hexo"></a>三、Hexo</h1><p>桌面右键鼠标，点击Git Bash Here，输入npm命令即可安装</p>
<pre><code>npm install hexo-cli -g
npm install hexo --save
</code></pre><p>如果命令无法运行，可尝试更换taobao的npm源</p>
<pre><code>npm install -g cnpm --registry==https://registry.npm.taobao.org
</code></pre><h2 id="Hexo初始化配置"><a href="#Hexo初始化配置" class="headerlink" title="Hexo初始化配置"></a>Hexo初始化配置</h2><h3 id="创建Hexo文件夹"><a href="#创建Hexo文件夹" class="headerlink" title="创建Hexo文件夹"></a>创建Hexo文件夹</h3><p>安装完成后，新建目录如：F:\Blog\Hexo，进入文件夹右键鼠标，点击Git Bash Here，进入Git命令框，执行以下操作。</p>
<pre><code>hexo init
npm install
</code></pre><p>安装完成后，Hexo将会在指定文件夹中新建所需的文件。</p>
<h3 id="安装Hexo插件"><a href="#安装Hexo插件" class="headerlink" title="安装Hexo插件"></a>安装Hexo插件</h3><p>以下是Hexo的其他插件（进入Hexo文件夹）</p>
<pre><code>npm install hexo-generator-index --save
npm install hexo-generator-archive --save
npm install hexo-generator-category --save
npm install hexo-generator-tag --save
npm install hexo-server --save
npm install hexo-deployer-git --save
npm install hexo-deployer-heroku --save
npm install hexo-deployer-rsync --save
npm install hexo-deployer-openshift --save
npm install hexo-renderer-marked@0.2 --save
npm install hexo-renderer-stylus@0.2 --save
npm install hexo-generator-feed@1 --save
npm install hexo-generator-sitemap@1 --save
</code></pre><h3 id="本地查看效果"><a href="#本地查看效果" class="headerlink" title="本地查看效果"></a>本地查看效果</h3><p>进入Hexo文件夹并执行下面语句，执行完即可登录localhost:4000查看效果。</p>
<pre><code>hexo g
hexo s
</code></pre><h2 id="将博客部署到Github-Pages上"><a href="#将博客部署到Github-Pages上" class="headerlink" title="将博客部署到Github Pages上"></a>将博客部署到Github Pages上</h2><h3 id="第一步、注册Github账号"><a href="#第一步、注册Github账号" class="headerlink" title="第一步、注册Github账号"></a>第一步、注册Github账号</h3><h3 id="第二步、创建项目代码库"><a href="#第二步、创建项目代码库" class="headerlink" title="第二步、创建项目代码库"></a>第二步、创建项目代码库</h3><p>注册完成后，创建一个Github Pages项目，点击New repository。</p>
<p>创建注意要点：<br><strong>1.Repository name 项目名称必须为username.github.io</strong></p>
<p><strong>2.选择Public</strong></p>
<p><strong>3.勾选Initialize this repository with a README。最后点击创建。</strong></p>
<h3 id="第三步、配置SSH密钥"><a href="#第三步、配置SSH密钥" class="headerlink" title="第三步、配置SSH密钥"></a>第三步、配置SSH密钥</h3><p>配置Github的SSH密钥可以让本地git项目与远程的github建立联系，让我们在本地写了代码之后直接通过git操作就可以实现本地代码与Github代码库的同步。</p>
<p><strong>1.查看是否存在SSH密钥</strong><br>首先查看本机是否存在SSH keys，打开Git Bash，并运行。</p>
<pre><code>cd ~/.ssh
</code></pre><p>检查本机用户home目录下是否存在.ssh目录，如果不存在此目录，则进行第二步操作，否则，本机已经存在ssh公钥和私钥，直接进行第三步操作。</p>
<p><strong>2.创建一对新的SSH密钥</strong></p>
<pre><code>ssh-keygen -t rsa -C &quot;邮箱地址&quot;
</code></pre><p>之后将会按照提供的邮箱地址，创建一对密钥，如下提示。</p>
<pre><code>Generating public/private rsa key pair.
Enter file in which to save the key(/c/Users/you/.ssh/id_rsa):[Press enter]
</code></pre><p>直接回车，则将密钥按照默认文件进行存储。也可以输入特定的文件名，如：/c/Users/you/.ssh/github_rsa,接着，根据提示，输入密码和确认密码。</p>
<pre><code>Enter passphrase (empty for no passphrase): [Type a passphrase]
Enter same passphrase again: [Type passphrase again]
</code></pre><p>输入完成之后，屏幕会显示如下信息：</p>
<pre><code>Your identification has been saved in /c/Users/you/.ssh/id_rsa.
Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub.
The key fingerprint is:
01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com
</code></pre><p><strong>3.在Github账户中添加公钥</strong><br>登录Github，进入Account Settings，选择SSH keys，粘贴密钥。</p>
<p><strong>4.测试</strong><br>可以输入下面的命令，看看设置是否成功，git@github.com的部分不要修改：</p>
<pre><code>$ ssh -T git@github.com
</code></pre><p>如果是下面的反馈：</p>
<pre><code>The authenticity of host &apos;github.com (207.97.227.239)&apos; can&apos;t be established.
RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.
Are you sure you want to continue connecting (yes/no)?
</code></pre><p>输入yes，将会看到。</p>
<pre><code>Hi cnfeat! You&apos;ve successfully authenticated, but GitHub does not provide shell access.
</code></pre><p><strong>5.设置用户信息</strong><br>现在你已经可以通过SSH连接到GitHub了，还有一些个人信息需要完善的。Git会根据用户的名字和邮箱来记录提交。GitHub也是用这些信息来做权限的处理。</p>
<pre><code>$ git config --global user.name &quot;cnfeat&quot;//用户名
$ git config --global user.email  &quot;cnfeat@gmail.com&quot;//填写自己的邮箱
</code></pre><p><strong>6.SSH key配置成功</strong><br>本机已成功连接到github。</p>
<h3 id="第四步、将本地的Hexo文件更新到Github的库中"><a href="#第四步、将本地的Hexo文件更新到Github的库中" class="headerlink" title="第四步、将本地的Hexo文件更新到Github的库中"></a>第四步、将本地的Hexo文件更新到Github的库中</h3><p><strong>1.登录Github打开自己的项目username.github.io，复制项目地址。</strong></p>
<p><strong>2.打开本地Hexo文件夹，修改文件夹下的_config.yml文件</strong></p>
<pre><code>deploy:
  type: git
  repository: &quot;填写刚才复制的项目地址&quot;
  branch: master
</code></pre><p><strong>3.在Hexo文件夹下执行：</strong></p>
<pre><code>hexo g
hexo d
</code></pre><p>或者直接执行</p>
<pre><code>hexo g -d
</code></pre><p>执行完之后会让你输入github的账号和密码，输入完后就可以登录我们自己的部署在Github Pages服务器上的博客了。对应的地址是 username.github.io。</p>
<p><strong>4.在浏览器上输入自己的主页地址，即可看到自己的博客了。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、安装node-js&quot;&gt;&lt;a href=&quot;#一、安装node-js&quot; class=&quot;headerlink&quot; title=&quot;一、安装node.js&quot;&gt;&lt;/a&gt;一、安装node.js&lt;/h1&gt;&lt;p&gt;在 Windows 环境下安装 Node.js 非常简单，仅须到官网下载安装文件并执行即可完成安装,&lt;br&gt;不需要配置环境变量。&lt;/p&gt;
&lt;h1 id=&quot;二、安装Git&quot;&gt;&lt;a href=&quot;#二、安装Git&quot; class=&quot;headerlink&quot; title=&quot;二、安装Git&quot;&gt;&lt;/a&gt;二、安装Git&lt;/h1&gt;&lt;p&gt;安装完后，右键点击Git Bash Here即可打开Git Shell。&lt;/p&gt;
&lt;h2 id=&quot;Git基本操作&quot;&gt;&lt;a href=&quot;#Git基本操作&quot; class=&quot;headerlink&quot; title=&quot;Git基本操作&quot;&gt;&lt;/a&gt;Git基本操作&lt;/h2&gt;&lt;p&gt;git clone：将远程仓库复制到本地：git clone 项目地址&lt;br&gt;git init：新建一个仓库。&lt;br&gt;git pull：抓取远程仓库搜有分支更新合并到本地。&lt;br&gt;git add：跟踪新文件（把目标文件快件放入暂存区域）：git add 文件名/文件夹名，如果是跟踪全部修改过的文件：git add或者git add –all&lt;br&gt;git commit：提交你的修改：git commit -m “你的注释”&lt;br&gt;git push：推送你本地仓库的更新到远程仓库，语法为git push [远程名] [本地分支]：[远程分支]&lt;/p&gt;
    
    </summary>
    
      <category term="git" scheme="http://yoursite.com/categories/git/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>如何用Github Pages+Hexo+Markdown搭建一个独立博客（前言）</title>
    <link href="http://yoursite.com/2016/12/18/page_1/"/>
    <id>http://yoursite.com/2016/12/18/page_1/</id>
    <published>2016-12-18T12:23:34.795Z</published>
    <updated>2016-12-21T16:02:32.521Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎大家来到我的博客， 这个博客非常有意思哦。。。</p>
<p>摘要：Github Pages和Hexo可以用于搭建自己的独立博客，本篇博客主要对Github Pages和Hexo进行简单的介绍。</p>
<h2 id="关于Github"><a href="#关于Github" class="headerlink" title="关于Github"></a>关于Github</h2><h3 id="Github的优点"><a href="#Github的优点" class="headerlink" title="Github的优点"></a>Github的优点</h3><ul>
<li>GitHub是基于git实现的代码托管。git可能是目前最好用的版本控制系统了，非常受欢迎。</li>
<li>GitHub可以免费使用，并且快速稳定。</li>
<li>Github上面的世界很精彩，用久了你的眼界会开阔很多。</li>
</ul>
<h3 id="什么是Github-Pages"><a href="#什么是Github-Pages" class="headerlink" title="什么是Github Pages"></a>什么是Github Pages</h3><p>Github Pages可以被认为是用户编写的、托管在github上的静态网页。</p>
<a id="more"></a>
<h3 id="为什么要使用Github-Pages"><a href="#为什么要使用Github-Pages" class="headerlink" title="为什么要使用Github Pages"></a>为什么要使用Github Pages</h3><ul>
<li>可以绑定你的域名(但暂时貌似只能绑定一个)。</li>
<li>简单快捷，使用Github Pages可以为你提供一个免费的服务器，免去了自己搭建服务器和写数据库的麻烦。</li>
</ul>
<h2 id="关于Hexo"><a href="#关于Hexo" class="headerlink" title="关于Hexo"></a>关于Hexo</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<h2 id="用Markdown写文章"><a href="#用Markdown写文章" class="headerlink" title="用Markdown写文章"></a>用Markdown写文章</h2><h3 id="什么是Markdown？"><a href="#什么是Markdown？" class="headerlink" title="什么是Markdown？"></a>什么是Markdown？</h3><p>Markdown 是一种轻量级的「标记语言」，它的优点很多，目前也被越来越多的写作爱好者，撰稿者广泛使用。看到这里请不要被「标记」、「语言」所迷惑，Markdown 的语法十分简单。常用的标记符号也不超过十个，这种相对于更为复杂的HTML 标记语言来说，Markdown 可谓是十分轻量的，学习成本也不需要太多，且一旦熟悉这种语法规则，会有一劳永逸的效果。</p>
<h3 id="Markdown有什么优点？"><a href="#Markdown有什么优点？" class="headerlink" title="Markdown有什么优点？"></a>Markdown有什么优点？</h3><ul>
<li>专注你的文字内容而不是排版样式。</li>
<li>轻松的导出 HTML、PDF 和本身的 .md 文件。</li>
<li>纯文本内容，兼容所有的文本编辑器与字处理软件。</li>
<li>可读，直观。适合所有人的写作语言。</li>
</ul>
<h3 id="我该用什么工具？"><a href="#我该用什么工具？" class="headerlink" title="我该用什么工具？"></a>我该用什么工具？</h3><ul>
<li>Windows下可以使用 MarkdownPad2。</li>
<li>在 Mac OS X 上，我建议你用 Mou 这款免费且十分好用的 Markdown 编辑器。</li>
<li>Web 端上，我强烈推荐 简书 这款产品。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;欢迎大家来到我的博客， 这个博客非常有意思哦。。。&lt;/p&gt;
&lt;p&gt;摘要：Github Pages和Hexo可以用于搭建自己的独立博客，本篇博客主要对Github Pages和Hexo进行简单的介绍。&lt;/p&gt;
&lt;h2 id=&quot;关于Github&quot;&gt;&lt;a href=&quot;#关于Github&quot; class=&quot;headerlink&quot; title=&quot;关于Github&quot;&gt;&lt;/a&gt;关于Github&lt;/h2&gt;&lt;h3 id=&quot;Github的优点&quot;&gt;&lt;a href=&quot;#Github的优点&quot; class=&quot;headerlink&quot; title=&quot;Github的优点&quot;&gt;&lt;/a&gt;Github的优点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;GitHub是基于git实现的代码托管。git可能是目前最好用的版本控制系统了，非常受欢迎。&lt;/li&gt;
&lt;li&gt;GitHub可以免费使用，并且快速稳定。&lt;/li&gt;
&lt;li&gt;Github上面的世界很精彩，用久了你的眼界会开阔很多。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;什么是Github-Pages&quot;&gt;&lt;a href=&quot;#什么是Github-Pages&quot; class=&quot;headerlink&quot; title=&quot;什么是Github Pages&quot;&gt;&lt;/a&gt;什么是Github Pages&lt;/h3&gt;&lt;p&gt;Github Pages可以被认为是用户编写的、托管在github上的静态网页。&lt;/p&gt;
    
    </summary>
    
      <category term="git" scheme="http://yoursite.com/categories/git/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
</feed>
