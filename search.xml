<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[git和svn的区别]]></title>
      <url>%2F2016%2F12%2F20%2Fpage_4%2F</url>
      <content type="text"><![CDATA[1）Git是分布式的，SVN不是：这是git和其它非分布式的版本控制系统，例如SVN，CVS等，最核心的区别。好处是跟其他同事不会有太多的冲突，自己写的代码放在自己电脑上，一段时间后再提交、合并，也可以不用联网在本地提交。git跟SVN一样有自己的集中式版本库或服务器。但git更倾向于被使用于分布式模式，也就是每个开发人员从中心版本库/服务器上chect out代码后会在自己的机器上克隆一个自己的版本库。可以这样说，如果你被困在一个不能连接网络的地方时，你仍然能够提交文件，查看历史版本记录，创建项目分支等。 2）git把内容按元数据方式存储，而SVN是按文件：所有的资源控制系统都是把文件的元信息隐藏在一个类似.svn,.cvs等的文件夹里。如果你把.git目录的体积大小跟.svn比较，你会发现它们差距很大。因为.git目录是处于你的机器上的一个克隆版的版本库，它拥有中心版本库上所有的东西，例如标签，分支，版本记录等。 3）git没有一个全局的版本号，而SVN有4）git分支和SVN的分支不同：分支在SVN中一点不特别，就是版本库中的另外的一个目录。如果你想知道是否合并了一个分支，你需要手工运行像这样的命令svn propget svn:mergeinfo，来确认代码是否被合并。然而，处理git的分支却是相当的简单和有趣。 5）git的内容完整性要优于SVN：git的内容存储使用的是SHA-1哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。 6）git下载下来后，在本地不必联网就可以看到所有的log，很方便学习，SVN却需要联网；7）SVN在Commit前，我们都建议是先Update一下，跟本地的代码编译没问题，并确保开发的功能正常后再提交，git可能这种情况会少些。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[如何美化Github Pages搭建的独立博客]]></title>
      <url>%2F2016%2F12%2F20%2Fpage_3%2F</url>
      <content type="text"><![CDATA[一、进入Hexo的官网主题专栏二、挑选我们喜欢的主题可以看到有很多主题给我们选，我们只要选择喜欢的主题点击进去，然后进入到它的github地址，我们只要把这个地址复制下来(例如我是选择：hexo-theme-next这个主题) 三、克隆主题再打开Hexo文件夹下的themes目录，右键Git Bash，在命令行输入: git clone https://github.com/iissnan/hexo-theme-next(此处地址替换成你需要使用的主题的地址) 之后主题下载中，等待下载完成。 四、修改Hexo配置文件下载完成后，打开Hexo文件夹下的配置文件_config.yml 修改参数为：theme: hexo-theme-next 五、部署主题，本地查看效果返回Hexo目录，右键Git Bash，输入 hexo g hexo s 打开浏览器，输入 http://localhost:4000/ 即可看见我们的主题已经更换了。 六、如果效果满意，将它部署到Github上打开Hexo文件夹，右键Git Bash，输入 hexo clean (必须要，不然有时因为缓存问题，服务器更新不了主题) hexo g -d 七、打开自己的主页，即可看到修改后的效果更多修改效果请查看对应主题的说明文档。 查看本主题（next）对应的说明文档，请点击http://theme-next.iissnan.com/]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[利用Github Pages搭建独立博客简明教程]]></title>
      <url>%2F2016%2F12%2F20%2Fpage_2%2F</url>
      <content type="text"><![CDATA[一、安装node.js在 Windows 环境下安装 Node.js 非常简单，仅须到官网下载安装文件并执行即可完成安装,不需要配置环境变量。 二、安装Git安装完后，右键点击Git Bash Here即可打开Git Shell。 Git基本操作git clone：将远程仓库复制到本地：git clone 项目地址git init：新建一个仓库。git pull：抓取远程仓库搜有分支更新合并到本地。git add：跟踪新文件（把目标文件快件放入暂存区域）：git add 文件名/文件夹名，如果是跟踪全部修改过的文件：git add或者git add –allgit commit：提交你的修改：git commit -m “你的注释”git push：推送你本地仓库的更新到远程仓库，语法为git push [远程名] [本地分支]：[远程分支] 三、Hexo桌面右键鼠标，点击Git Bash Here，输入npm命令即可安装 npm install hexo-cli -g npm install hexo --save 如果命令无法运行，可尝试更换taobao的npm源 npm install -g cnpm --registry==https://registry.npm.taobao.org Hexo初始化配置创建Hexo文件夹安装完成后，新建目录如：F:\Blog\Hexo，进入文件夹右键鼠标，点击Git Bash Here，进入Git命令框，执行以下操作。 hexo init npm install 安装完成后，Hexo将会在指定文件夹中新建所需的文件。 安装Hexo插件以下是Hexo的其他插件（进入Hexo文件夹） npm install hexo-generator-index --save npm install hexo-generator-archive --save npm install hexo-generator-category --save npm install hexo-generator-tag --save npm install hexo-server --save npm install hexo-deployer-git --save npm install hexo-deployer-heroku --save npm install hexo-deployer-rsync --save npm install hexo-deployer-openshift --save npm install hexo-renderer-marked@0.2 --save npm install hexo-renderer-stylus@0.2 --save npm install hexo-generator-feed@1 --save npm install hexo-generator-sitemap@1 --save 本地查看效果进入Hexo文件夹并执行下面语句，执行完即可登录localhost:4000查看效果。 hexo g hexo s 将博客部署到Github Pages上第一步、注册Github账号第二步、创建项目代码库注册完成后，创建一个Github Pages项目，点击New repository。 创建注意要点：1.Repository name 项目名称必须为username.github.io 2.选择Public 3.勾选Initialize this repository with a README。最后点击创建。 第三步、配置SSH密钥配置Github的SSH密钥可以让本地git项目与远程的github建立联系，让我们在本地写了代码之后直接通过git操作就可以实现本地代码与Github代码库的同步。 1.查看是否存在SSH密钥首先查看本机是否存在SSH keys，打开Git Bash，并运行。 cd ~/.ssh 检查本机用户home目录下是否存在.ssh目录，如果不存在此目录，则进行第二步操作，否则，本机已经存在ssh公钥和私钥，直接进行第三步操作。 2.创建一对新的SSH密钥 ssh-keygen -t rsa -C &quot;邮箱地址&quot; 之后将会按照提供的邮箱地址，创建一对密钥，如下提示。 Generating public/private rsa key pair. Enter file in which to save the key(/c/Users/you/.ssh/id_rsa):[Press enter] 直接回车，则将密钥按照默认文件进行存储。也可以输入特定的文件名，如：/c/Users/you/.ssh/github_rsa,接着，根据提示，输入密码和确认密码。 Enter passphrase (empty for no passphrase): [Type a passphrase] Enter same passphrase again: [Type passphrase again] 输入完成之后，屏幕会显示如下信息： Your identification has been saved in /c/Users/you/.ssh/id_rsa. Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub. The key fingerprint is: 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com 3.在Github账户中添加公钥登录Github，进入Account Settings，选择SSH keys，粘贴密钥。 4.测试可以输入下面的命令，看看设置是否成功，git@github.com的部分不要修改： $ ssh -T git@github.com 如果是下面的反馈： The authenticity of host &apos;github.com (207.97.227.239)&apos; can&apos;t be established. RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48. Are you sure you want to continue connecting (yes/no)? 输入yes，将会看到。 Hi cnfeat! You&apos;ve successfully authenticated, but GitHub does not provide shell access. 5.设置用户信息现在你已经可以通过SSH连接到GitHub了，还有一些个人信息需要完善的。Git会根据用户的名字和邮箱来记录提交。GitHub也是用这些信息来做权限的处理。 $ git config --global user.name &quot;cnfeat&quot;//用户名 $ git config --global user.email &quot;cnfeat@gmail.com&quot;//填写自己的邮箱 6.SSH key配置成功本机已成功连接到github。 第四步、将本地的Hexo文件更新到Github的库中1.登录Github打开自己的项目username.github.io，复制项目地址。 2.打开本地Hexo文件夹，修改文件夹下的_config.yml文件 deploy: type: git repository: &quot;填写刚才复制的项目地址&quot; branch: master 3.在Hexo文件夹下执行： hexo g hexo d 或者直接执行 hexo g -d 执行完之后会让你输入github的账号和密码，输入完后就可以登录我们自己的部署在Github Pages服务器上的博客了。对应的地址是 username.github.io。 4.在浏览器上输入自己的主页地址，即可看到自己的博客了。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[如何用Github Pages+Hexo+Markdown搭建一个独立博客（前言）]]></title>
      <url>%2F2016%2F12%2F18%2Fpage_1%2F</url>
      <content type="text"><![CDATA[欢迎大家来到我的博客， 这个博客非常有意思哦。。。 摘要：Github Pages和Hexo可以用于搭建自己的独立博客，本篇博客主要对Github Pages和Hexo进行简单的介绍。 关于GithubGithub的优点 GitHub是基于git实现的代码托管。git可能是目前最好用的版本控制系统了，非常受欢迎。 GitHub可以免费使用，并且快速稳定。 Github上面的世界很精彩，用久了你的眼界会开阔很多。 什么是Github PagesGithub Pages可以被认为是用户编写的、托管在github上的静态网页。 为什么要使用Github Pages 可以绑定你的域名(但暂时貌似只能绑定一个)。 简单快捷，使用Github Pages可以为你提供一个免费的服务器，免去了自己搭建服务器和写数据库的麻烦。 关于HexoHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 用Markdown写文章什么是Markdown？Markdown 是一种轻量级的「标记语言」，它的优点很多，目前也被越来越多的写作爱好者，撰稿者广泛使用。看到这里请不要被「标记」、「语言」所迷惑，Markdown 的语法十分简单。常用的标记符号也不超过十个，这种相对于更为复杂的HTML 标记语言来说，Markdown 可谓是十分轻量的，学习成本也不需要太多，且一旦熟悉这种语法规则，会有一劳永逸的效果。 Markdown有什么优点？ 专注你的文字内容而不是排版样式。 轻松的导出 HTML、PDF 和本身的 .md 文件。 纯文本内容，兼容所有的文本编辑器与字处理软件。 可读，直观。适合所有人的写作语言。 我该用什么工具？ Windows下可以使用 MarkdownPad2。 在 Mac OS X 上，我建议你用 Mou 这款免费且十分好用的 Markdown 编辑器。 Web 端上，我强烈推荐 简书 这款产品。]]></content>
    </entry>

    
  
  
</search>
